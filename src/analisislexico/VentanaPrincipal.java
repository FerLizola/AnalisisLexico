/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analisislexico;

import static analisislexico.Archivo.codigo;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Event;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author Bryan
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    String cad="",hum,luz,ph,agua,sustrato;
    float min_hum,min_luz,min_ph,min_agua,min_sust;
    int bandera,out_hum,out_luz,out_ph,out_agua,out_sust,bandera1;
    
    public VentanaPrincipal() {
        this.bandera = 0;
        bandera1=0;
        out_hum=0;
        out_luz=0;
        out_ph=0;
        out_agua=0;
        out_sust=0;
        ActionMap acciones;    
        
    
        initComponents();
        
        acciones = jtxtCode.getActionMap();
        Action accionCopiar = acciones.get(DefaultEditorKit.copyAction);
        Action accionPegar = acciones.get(DefaultEditorKit.pasteAction);
        Action accionCortar = acciones.get(DefaultEditorKit.cutAction);
        
        accionCopiar.putValue(Action.NAME, "Copiar");
        accionCopiar.putValue(
        Action.ACCELERATOR_KEY,
        KeyStroke.getAWTKeyStroke('C', Event.CTRL_MASK)); 
        
        accionPegar.putValue(Action.NAME, "Pegar");
        accionPegar.putValue(
        Action.ACCELERATOR_KEY,
        KeyStroke.getAWTKeyStroke('V', Event.CTRL_MASK)); 
        
        accionCortar.putValue(Action.NAME, "Cortar");
        accionCortar.putValue(
        Action.ACCELERATOR_KEY,
        KeyStroke.getAWTKeyStroke('X', Event.CTRL_MASK)); 
        
        
        accionCopiar.putValue (Action.SMALL_ICON, new ImageIcon("src/Copy.png"));
        accionCortar.putValue (Action.SMALL_ICON, new ImageIcon("src/Cut.png"));
        accionPegar.putValue (Action.SMALL_ICON, new ImageIcon("src/Paste.png")); 
        
        jtxtCode.setWrapStyleWord(true);
        jtxtCode.setLineWrap(true);
        jtxtCode.setText("");
        scroll.setRowHeaderView(new LineNumber(jtxtCode));
        
        jMenu2.add(accionCopiar);
        jMenu2.add(accionPegar);
        jMenu2.add(accionCortar);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        jtxtCode = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxtError = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxtProd = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        btnLoadArduino = new javax.swing.JButton();
        cmbPort = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnAbrir = new javax.swing.JMenuItem();
        btnGuardar = new javax.swing.JMenuItem();
        btnNuevo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        menuAutomatas = new javax.swing.JMenuItem();
        mit_ayuda = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jtxtCode.setColumns(20);
        jtxtCode.setFont(new java.awt.Font("Monospaced", 0, 20)); // NOI18N
        jtxtCode.setRows(5);
        jtxtCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtCodeKeyTyped(evt);
            }
        });
        scroll.setViewportView(jtxtCode);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compile.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jtxtError.setColumns(20);
        jtxtError.setRows(5);
        jScrollPane3.setViewportView(jtxtError);

        jLabel1.setText("Salida:");

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/open.png"))); // NOI18N
        btnOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpenMouseClicked(evt);
            }
        });
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cut.png"))); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Paste.png"))); // NOI18N

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Copy.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Nuevo.png"))); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jtxtProd.setColumns(20);
        jtxtProd.setRows(5);
        jScrollPane2.setViewportView(jtxtProd);

        jLabel2.setText("Producciones:");

        btnLoadArduino.setText("Cargar a Arduino");
        btnLoadArduino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadArduinoActionPerformed(evt);
            }
        });

        cmbPort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5" }));

        jMenu1.setText("Archivo");

        btnAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        btnAbrir.setText("Abrir");
        btnAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAbrirMouseClicked(evt);
            }
        });
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(btnAbrir);

        btnGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        btnGuardar.setText("Guardar");
        jMenu1.add(btnGuardar);

        btnNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        btnNuevo.setText("Nuevo");
        jMenu1.add(btnNuevo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Compilar");

        menuAutomatas.setText("Automatas");
        menuAutomatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAutomatasActionPerformed(evt);
            }
        });
        jMenu3.add(menuAutomatas);

        mit_ayuda.setText("Ayuda");
        mit_ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mit_ayudaActionPerformed(evt);
            }
        });
        jMenu3.add(mit_ayuda);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnLoadArduino)
                                .addGap(18, 18, 18)
                                .addComponent(cmbPort, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnLoadArduino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        StringReader cad= new StringReader(jtxtCode.getText());
        Reader red= new BufferedReader(cad);
        TablaSimbolos t=new TablaSimbolos();
        Lexer lex = new Lexer(red,t);
        //jtxtTokens.setText("");
        jtxtError.setText("");
        jtxtError.setForeground(Color.red);
        jtxtProd.setText("");
        Token token=null;
        String cad1="";
        int beg=0,end=0;
        do{
            try {
                token = lex.yylex();
            } catch (IOException ex) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(token!=null){
               // jtxtTokens.setText(jtxtTokens.getText()+"EOF"+"\n");
                //System.out.println("EOF");
            
            
            switch(token){
                case valMineral:
                    bandera=5;
                    cad1+=token+" ";
                    break;
                case humAmb:
                    bandera=1;
                    cad1+=token+" ";
                    break;
                case valPh:
                    bandera=3;
                    cad1+=token+" ";
                    break;
                case valElect:
                    bandera=4;
                    cad1+=token+" ";
                    break;
                case valIlum:
                    bandera=2;
                    cad1+=token+" ";
                    break;
                case A0:
                    switch(bandera){
                        case 1:
                            hum="A0";
                            break;
                        case 2:
                            luz="A0";
                            break;
                        case 3:
                            ph="A0";
                            break;
                        case 4:
                            agua="A0";
                            break;
                        case 5:
                            sustrato="A0";
                            break;
                    }
                    cad1+=token+" ";
                    break;
                case A1:
                    switch(bandera){
                        case 1:
                            hum="A1";
                            break;
                        case 2:
                            luz="A1";
                            break;
                        case 3:
                            ph="A1";
                            break;
                        case 4:
                            agua="A1";
                            break;
                        case 5:
                            sustrato="A1";
                            break;
                    }
                    cad1+=token+" ";
                    break;
                case A2:
                    switch(bandera){
                        case 1:
                            hum="A2";
                            break;
                        case 2:
                            luz="A2";
                            break;
                        case 3:
                            ph="A2";
                            break;
                        case 4:
                            agua="A2";
                            break;
                        case 5:
                            sustrato="A2";
                            break;
                    }
                    cad1+=token+" ";
                    break;
                case A3:
                    switch(bandera){
                        case 1:
                            hum="A3";
                            break;
                        case 2:
                            luz="A3";
                            break;
                        case 3:
                            ph="A3";
                            break;
                        case 4:
                            agua="A3";
                            break;
                        case 5:
                            sustrato="A3";
                            break;
                    }
                    cad1+=token+" ";
                    break;
                case A4:
                    switch(bandera){
                        case 1:
                            hum="A4";
                            break;
                        case 2:
                            luz="A4";
                            break;
                        case 3:
                            ph="A4";
                            break;
                        case 4:
                            agua="A4";
                            break;
                        case 5:
                            sustrato="A4";
                            break;
                    }
                    cad1+=token+" ";
                    break;
                case entero:
                    switch(bandera){
                        case 1:
                            min_hum=Float.parseFloat(lex.lexeme);
                            bandera=0;
                            break;
                        case 2:
                            min_luz=Float.parseFloat(lex.lexeme);
                            bandera=0;
                            break;
                        case 3:
                            min_ph=Float.parseFloat(lex.lexeme);
                            bandera=0;
                            break;
                        case 4:
                            min_agua=Float.parseFloat(lex.lexeme);
                            bandera=0;
                            break;
                        case 5:
                            min_sust=Float.parseFloat(lex.lexeme);
                            bandera=0;
                            break;
                    }
                    switch(bandera1){
                        case 1:
                            out_agua=Integer.parseInt(lex.lexeme);
                            bandera1=0;
                            break;
                        case 2:
                            out_ph=Integer.parseInt(lex.lexeme);
                            bandera1=0;
                            break;
                        case 3:
                            out_hum=Integer.parseInt(lex.lexeme);
                            bandera1=0;
                            break;
                        case 4:
                            out_luz=Integer.parseInt(lex.lexeme);
                            bandera1=0;
                            break;
                        case 5:
                            out_sust=Integer.parseInt(lex.lexeme);
                            bandera1=0;
                            break;
                    }
                    cad1+=token+" ";
                    break;
                case bombAgua:
                    bandera1=1;
                    cad1+=token+" ";
                    break;
                case bombPh:
                    bandera1=2;
                    cad1+=token+" ";
                    break;
                case onVent:
                    bandera1=3;
                    cad1+=token+" ";
                    break;
                case onLuz:
                    bandera1=4;
                    cad1+=token+" ";
                    break;
                case bombaMin:
                    bandera1=5;
                    cad1+=token+" ";
                    break;
                case ENDLN:
                    //jtxtTokens.setText(jtxtTokens.getText()+"TOKEN: "+token+" "+lex.lexeme+"\n");
                    //System.out.println(cad1);
                    //ERRORES
                    if(cad1.equals("temIdeal PARAB A0 COMA flotante PARCI ")){
                        
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A1 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                        System.out.print(hum);
                    }
                    if(cad1.equals("temIdeal PARAB A2 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A3 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A4 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal PARAB A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    //SIN PARENTESIS
                    if(cad1.equals("temIdeal A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("temIdeal A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    //humAmb
                    if(cad1.equals("humAmb PARAB A0 COMA flotante PARCI ")){
                        
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A1 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                        System.out.print(hum);
                    }
                    if(cad1.equals("humAmb PARAB A2 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A3 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A4 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb PARAB A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    //SIN PARENTESIS
                    if(cad1.equals("humAmb A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("humAm A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("humAmb A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    
                    //valPh
                    if(cad1.equals("valPh PARAB A0 COMA flotante PARCI ")){
                        
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A1 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                        System.out.print(hum);
                    }
                    if(cad1.equals("valPh PARAB A2 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A3 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A4 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh PARAB A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    //SIN PARENTESIS
                    if(cad1.equals("valPh A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valPh A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    
                    //valMineral
                    if(cad1.equals("valMineral PARAB A0 COMA flotante PARCI ")){
                        
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A1 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                        System.out.print(hum);
                    }
                    if(cad1.equals("valMineral PARAB A2 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A3 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A4 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral PARAB A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    //SIN PARENTESIS
                    if(cad1.equals("valMineral A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valMineral A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    //valIlum
                    if(cad1.equals("valIlum PARAB A0 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A1 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                        System.out.print(hum);
                    }
                    if(cad1.equals("valIlum PARAB A2 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A3 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A4 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum PARAB A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    //SIN PARENTESIS
                    if(cad1.equals("valIlum A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("valIlum A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    //BombAgua
                    if(cad1.equals("bombAgua PARAB A0 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A1 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                        System.out.print(hum);
                    }
                    if(cad1.equals("bombAgua PARAB A2 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A3 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A4 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua PARAB A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    //SIN PARENTESIS
                    if(cad1.equals("bombAgua A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombAgua A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    //bombPh
                    if(cad1.equals("bombPh PARAB A0 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A1 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                        System.out.print(hum);
                    }
                    if(cad1.equals("bombPh PARAB A2 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A3 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A4 COMA flotante PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de tipos."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh PARAB A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta operador \")\"."
                                + " '('\n");
                    }
                    //SIN PARENTESIS
                    if(cad1.equals("bombPh A3 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh A2 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh A1 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh A4 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    if(cad1.equals("bombPh A0 COMA flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + " '('\n");
                    }
                    
                    
                    //GRAMATICAS ANTERIORES
                    if(cad1.equals("ID MUL ID ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> T * F\n"
                                + "T -> F * F\n"
                                + "F -> ID * F\n"
                                + "F -> ID * ID\n\n");
                    }
                    if(cad1.equals("ID DIV ID ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> T / F\n"
                                + "T -> F / F\n"
                                + "F -> ID / F\n"
                                + "F -> ID / ID\n\n");
                    }
                    if(cad1.equals("PARAB ID SUM ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> (E)\n"
                                + "E -> ( T + E )\n"
                                + "T -> ( F + E )\n"
                                + "F -> ( ID + E )\n"
                                + "E -> ( ID + T )\n"
                                + "T -> ( ID + F )\n"
                                + "F -> ( ID + ID )\n\n");
                    }
                    if(cad1.equals("PARAB ID MEN ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> (E)\n"
                                + "E -> ( T - E )\n"
                                + "T -> ( F - E )\n"
                                + "F -> ( ID - E )\n"
                                + "E -> ( ID - T )\n"
                                + "T -> ( ID - F )\n"
                                + "F -> ( ID - ID )\n\n");
                    }
                    if(cad1.equals("ID MEN ID ")){
                        jtxtProd.setText(jtxtProd.getText()
                                + "E -> T - E \n"
                                + "T -> F - E\n"
                                + "F -> ID - E\n"
                                + "E -> ID - T\n"
                                + "T -> ID - F\n"
                                + "F -> ID - ID\n\n");
                    }
                    if(cad1.equals("ID MUL ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> T * F\n"
                                + "T -> F * F\n"
                                + "F -> ID * F\n"
                                + "F -> ID * ID\n"
                                + "ERROR, PARENTESIS '(' FALTANTE\n\n");
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta del operador"
                                + " '('\n");
                    }
                    if(cad1.equals("PARAB ID MUL ID ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> T \n"
                                + "T -> F \n"
                                + "F -> ( E )\n"
                                + "E -> ( T )\n"
                                + "T -> ( T * F )\n"
                                + "T -> ( F * F )\n"
                                + "F -> ( ID * F )\n"
                                + "F -> ( ID * ID )\n"
                                + "ERROR, PARENTESIS ')' FALTANTE\n\n");
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta del operador"
                                + " ')'\n");
                    }
                    if(cad1.equals("ID SUM ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> T * F\n"
                                + "T -> F * F\n"
                                + "F -> ID * F\n"
                                + "F -> ID * ID\n"
                                + "ERROR, PARENTESIS '(' FALTANTE\n\n");
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta del operador"
                                + " '('\n");
                    }
                    if(cad1.equals("PARAB ID SUM ID ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> T \n"
                                + "T -> F \n"
                                + "F -> ( E )\n"
                                + "E -> ( T )\n"
                                + "T -> ( T * F )\n"
                                + "T -> ( F * F )\n"
                                + "F -> ( ID * F )\n"
                                + "F -> ( ID * ID )\n"
                                + "ERROR, PARENTESIS ')' FALTANTE\n\n");
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Falta del operador"
                                + " ')'\n");
                    }
                    if(cad1.equals("PARAB ID MUL ID PARCI ")){//PARAB ID MUL ID PARCI
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> (E)\n"
                                + "E -> ( T )\n"
                                + "T -> ( T * F )\n"
                                + "T -> ( F * F )\n"
                                + "F -> ( ID * F )\n"
                                + "T -> ( ID * F )\n"
                                + "F -> ( ID * ID )\n\n");
                    }
                    if(cad1.equals("PARAB ID DIV ID PARCI ")){//PARAB ID MUL ID PARCI
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> (E)\n"
                                + "E -> ( T )\n"
                                + "T -> ( T / F )\n"
                                + "T -> ( F / F )\n"
                                + "F -> ( ID / F )\n"
                                + "T -> ( ID / F )\n"
                                + "F -> ( ID / ID )\n\n");
                    }
                    if(cad1.equals("PARAB PARAB ID MUL ID PARCI entero PARCI ")){//Su
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T + E ) \n"
                                + "T -> ( F + E ) \n"
                                + "F -> ( ( E ) + E ) \n"
                                + "E -> ( ( T ) + E ) \n"
                                + "T -> ( (T * F) + E ) \n"
                                + "T -> ( ( F * F ) + E ) \n"
                                + "F -> ( ( ID * F ) + E )\n"
                                + "F -> ( ( ID * ID ) + E )\n"
                                + "E -> ( ( ID * ID ) + T )\n"
                                + "T -> ( ( ID * ID ) + F )\n"
                                + "F -> ( ( ID * ID ) + entero ) \n\n");
                    }//PARAB PARAB ID SUM ID PARCI DIV entero PARCI 
                    if(cad1.equals("PARAB PARAB ID SUM ID PARCI DIV entero PARCI  ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T / F ) \n"
                                + "T -> ( F / F ) \n"
                                + "F -> ( ( E ) + F ) \n"
                                + "E -> ( ( T + E ) + F ) \n"
                                + "T -> ( ( F + E ) + F ) \n"
                                + "F -> ( ( ID + F ) + F )\n"
                                + "F -> ( ( ID + F ) + F )\n"
                                + "F -> ( ( ID + ID ) + F )\n"
                                + "F -> ( ( ID + ID ) + entero )\n\n");
                    }
                    if(cad1.equals("PARAB PARAB ID SUM ID PARCI DIV entero PARCI  ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T / F ) \n"
                                + "T -> ( F / F ) \n"
                                + "F -> ( ( E ) + F ) \n"
                                + "E -> ( ( T + E ) + F ) \n"
                                + "T -> ( ( F + E ) + F ) \n"
                                + "F -> ( ( ID + F ) + F )\n"
                                + "F -> ( ( ID + F ) + F )\n"
                                + "F -> ( ( ID + ID ) + F )\n"
                                + "F -> ( ( ID + ID ) + entero )\n\n");
                    }
                    if(cad1.equals("PARAB PARAB ID SUM ID PARCI SUM ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T + E ) \n"
                                + "T -> ( F + E ) \n"
                                + "F -> ( ( E ) + E ) \n"
                                + "E -> ( ( T + E ) + E ) \n"
                                + "T -> ( ( F + E ) + E ) \n"
                                + "F -> ( ( ID + F ) + E )\n"
                                + "F -> ( ( ID + ID ) + E )\n"
                                + "E -> ( ( ID + ID ) + T )\n"
                                + "T -> ( ( ID + ID ) + F )\n"
                                + "F -> ( ( ID + ID ) + ID )\n\n ");
                    }
                    if(cad1.equals("PARAB PARAB ID SUM ID PARCI DIV ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T / F ) \n"
                                + "T -> ( F / F ) \n"
                                + "F -> ( ( E ) / F ) \n"
                                + "E -> ( ( T + E ) / F ) \n"
                                + "T -> ( ( F + E ) / F ) \n"
                                + "F -> ( ( ID + F ) / F )\n"
                                + "F -> ( ( ID + ID ) / F )\n"
                                + "F -> ( ( ID + ID ) / ID )\n\n");
                    }
                    if(cad1.equals("PARAB PARAB ID SUM ID PARCI MUL ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T * F ) \n"
                                + "T -> ( F * F ) \n"
                                + "F -> ( ( E ) * F ) \n"
                                + "E -> ( ( T + E ) * F ) \n"
                                + "T -> ( ( F + E ) * F ) \n"
                                + "F -> ( ( ID + F ) * F )\n"
                                + "F -> ( ( ID + ID ) * F )\n"
                                + "F -> ( ( ID + ID ) * ID )\n\n");
                    }
                    if(cad1.equals("PARAB PARAB ID SUM entero PARCI ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T + E ) \n"
                                + "T -> ( F + E ) \n"
                                + "F -> ( ( E ) + E ) \n"
                                + "E -> ( ( T + E ) + E ) \n"
                                + "T -> ( ( F + E ) + E ) \n"
                                + "F -> ( ( ID + F ) + E )\n"
                                + "F -> ( ( ID + entero ) + E )\n"
                                + "E -> ( ( ID + entero ) + T )\n"
                                + "T -> ( ( ID + entero ) + F )\n"
                                + "F -> ( ( ID + entero ) + ID )\n\n ");
                        
                    }
                    if(cad1.equals("PARAB PARAB entero SUM entero PARCI ID PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T + E ) \n"
                                + "T -> ( F + E ) \n"
                                + "F -> ( ( E ) + E ) \n"
                                + "E -> ( ( T + E ) + E ) \n"
                                + "T -> ( ( F + E ) + E ) \n"
                                + "F -> ( ( entero + F ) + E )\n"
                                + "F -> ( ( entero + entero ) + E )\n"
                                + "E -> ( ( entero + entero ) + T )\n"
                                + "T -> ( ( entero + entero ) + F )\n"
                                + "F -> ( ( entero + entero ) + ID )\n\n ");
                    }
                    if(cad1.equals("PARAB PARAB entero SUM entero PARCI entero PARCI ")){
                        jtxtProd.setText(jtxtProd.getText()+"E -> T\n"
                                + "T -> F\n"
                                + "F -> ( E )\n"
                                + "E -> ( T + E ) \n"
                                + "T -> ( F + E ) \n"
                                + "F -> ( ( E ) + E ) \n"
                                + "E -> ( ( T + E ) + E ) \n"
                                + "T -> ( ( F + E ) + E ) \n"
                                + "F -> ( ( entero + F ) + E )\n"
                                + "F -> ( ( entero + entero ) + E )\n"
                                + "E -> ( ( entero + entero ) + T )\n"
                                + "T -> ( ( entero + entero ) + F )\n"
                                + "F -> ( ( entero + entero ) + entero ) ");
                    }
                    if(cad1.equals("Int ID ID ASIG entero ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Int ID ID ASIG flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Int ID ASIG flotante ")||cad1.equals("ID ASIG flotante ")||cad1.equals("Int ID ASIG True ")||
                            cad1.equals("Int ID ASIG False ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. Tipos incompatibles\n");
                    }
                    if(cad1.equals("Int ID ASIG ASIG entero ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"==\"\n");
                    }
                    if(cad1.equals("Int ID ID")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Float ID ID ASIG entero ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Float ID ID ASIG flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Float ID ASIG True ")||cad1.equals("Float ID ASIG False ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. Tipos incompatibles\n");
                    }
                    if(cad1.equals("Float ID ASIG ASIG flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"==\"\n");
                    }
                    if(cad1.equals("Float ID ID")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    //Boolean
                    if(cad1.equals("Boolean ID ID ASIG True ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Boolean ID ID ASIG False ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Boolean ID ID ASIG True ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Boolean ID ID ASIG False ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("Boolean ID ASIG flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. Tipos incompatibles\n");
                    }
                    if(cad1.equals("Boolean ID ASIG entero ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. Tipos incompatibles\n");
                    }
                    if(cad1.equals("Boolean ID ASIG ASIG True ")||cad1.equals("Boolean ID ASIG ASIG False ") || cad1.equals("Boolean ID ASIG ASIG entero ")||cad1.equals("Boolean ID ASIG ASIG flotante ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"==\"\n");
                    }
                    if(cad1.equals("Int ID ID")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta declaración"
                                + "del identificador. \"ID ID\"\n");
                    }
                    if(cad1.equals("ID ID ASIG entero ")||cad1.equals("ID ID ASIG flotante ")||cad1.equals("ID ID ASIG True ")
                            ||cad1.equals("ID ID ASIG False ")||cad1.equals("ID ID ASIG ID MUL entero ")||cad1.equals("ID ID ASIG ID SUM entero ")
                            ||cad1.equals("ID ID ASIG ID MEN entero ")||cad1.equals("ID ID ASIG ID DIV entero ")||cad1.equals("ID ID ASIG ID MUL flotante ")||cad1.equals("ID ID ASIG ID SUM flotante ")
                            ||cad1.equals("ID ID ASIG ID MEN flotante ")||cad1.equals("ID ID ASIG ID DIV flotante ")||cad1.equals("ID ID ASIG ID MUL ID ")||cad1.equals("ID ID ASIG ID SUM ID ")
                            ||cad1.equals("ID ID ASIG ID MEN ID ")||cad1.equals("ID ID ASIG ID DIV ID "))
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis. No puede"
                                + "haber un identificador seguido de otro. \n");
                    cad1="";
                    if(cad1.equals("ID ID ASIG entero entero ")||cad1.equals("ID ID ASIG flotante flotante"))
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis. No puede"
                                + "haber un identificador seguido de otro. \n");
                    break;
                    
                    //System.out.println("TOKEN: "+token+" "+lexer.lexeme);
               // break;
                case Int: case ID: case For: case If: case toReturn: case Boolean:
                    System.out.println("a");
                    if(cad1.equals("Int Float ")||cad1.equals("Float Float ")||cad1.equals("Boolean Float ")||cad1.equals("Boolean Int ")
                            ||cad1.equals("Boolean Boolean ")||cad1.equals("Int Int ")||cad1.equals("Int Boolean ")
                            ||cad1.equals("Float Boolean ")||cad1.equals("Float Int ")||cad1.equals("Float Boolean ")
                            ){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Error de Sintaxis."
                                + "Incorrecta declaración. \n");
                    }
                    cad1+=token+" ";
                    break;
                case ERROR:
                    //jtxtTokens.setText(jtxtTokens.getText()+"TOKEN: "+token+" "+lex.lexeme+"\n");
                    jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+" en la "
                            + "cadena "+(lex.lexeme)+". La cadena no es válida para el lenguaje."+"\n");
                    break;
                case end:
                    end++;
                    break;
                case begin: 
                    beg++;
                    System.out.println(cad1);
                    
                    if(cad1.equals("If PARAB PARAB ID MAYQ entero PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta formación"
                                + "de la cadena. \"((\"");
                    }
                    if(cad1.equals("If PARAB ID MAYQ entero PARCI PARCI ")){
                        jtxtError.setText(jtxtError.getText()+"Error en la línea "+(lex.linea+1)+". Incorrecta formación"
                                + "de la cadena. \"))\"");
                    }
                    cad1="";
                    break;
                default:
                    cad1+=token+" ";
                    break;
            }
            }
        }while(token!=null);
        if(beg!=end){
            if(beg<end){
                jtxtError.setText(jtxtError.getText()+"Error en el programa. Hace falta un begin"
                                );
            }
            else
                jtxtError.setText(jtxtError.getText()+"Error en el programa. Hace falta un end");
        }
        t.imprimir();
        if(!jtxtError.getText().isEmpty()){
            jtxtError.setForeground(Color.red);
            jtxtError.setText(jtxtError.getText());
        }
        else{
            jtxtError.setForeground(Color.blue);
            jtxtError.setText("Compilación correcta!");
        }
    }//GEN-LAST:event_jButton1MouseClicked

    public boolean evaluarExpresion(String cad){
        String[] a=cad.split("");
        return true;
    }
    
    public void abrirArchivo() throws FileNotFoundException, IOException{
        String aux="";  
        String texto = "";
        FileInputStream archivo = null;
        
        JFileChooser fc=new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.hp", "hp");
        fc.setFileFilter(filtro);
        fc.showOpenDialog(fc);       
      try{
        
        aux = fc.getSelectedFile().getAbsolutePath();
        File abre = fc.getSelectedFile();
         
        archivo = new FileInputStream(aux); 
        DataInputStream dis = new DataInputStream(archivo);
        
        jtxtCode.setText("");
        BufferedReader in = new BufferedReader(new FileReader(abre));
        String line = in.readLine();
        while(line != null){
          jtxtCode.append(line + "\n");
          line = in.readLine();
        }
      }catch(Exception ex){
          //System.out.println("Cancelado");
      }
      finally{
          if (archivo == null){
              
          }else{
            archivo.close();
          }
      }

    }
    
    
    public void guardarArchivo() throws IOException{
        
      final JFileChooser SaveAs = new JFileChooser();
      SaveAs.setApproveButtonText("Save");
      int actionDialog = SaveAs.showOpenDialog(this);
      if (actionDialog != JFileChooser.APPROVE_OPTION) {
         return;
      }

      File fileName = new File(SaveAs.getSelectedFile() + ".hp");
      BufferedWriter outFile = null;
      outFile = new BufferedWriter(new FileWriter(fileName));
      jtxtCode.write(outFile);   // *** here: ***
      if (outFile != null) {
          try {
              outFile.close();
          } catch (IOException e) {
              // one of the few times that I think that it's OK
              // to leave this blank
          }
      }
    }
    
        
    private void btnOpenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnOpenMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void btnAbrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAbrirMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAbrirMouseClicked

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        try {
            abrirArchivo();
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        try {
            abrirArchivo();
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            guardarArchivo();
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jtxtCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtCodeKeyTyped
        Character e=evt.getKeyChar();
        if(e!='\b'){
            cad+=e;
        }
        else{
            
        }
    }//GEN-LAST:event_jtxtCodeKeyTyped
    private void btnLoadArduinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadArduinoActionPerformed
        
        Archivo arch= new Archivo(min_hum,min_luz,min_ph,min_agua,min_sust,hum,luz
                ,ph,agua,sustrato,out_hum,out_luz,out_ph,out_agua,out_sust);
        jTextArea1.setText("Codigo intermedio: \n"+arch.getCode());
        System.out.println(arch.getCode());
        try {
            arch.crearArchivo("C:\\Users\\Bryan\\","ejemplo", codigo);
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        Arduino arduino = new Arduino();
        try {
            arduino.compilar();
            arduino.cargar(cmbPort.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoadArduinoActionPerformed

    private void menuAutomatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAutomatasActionPerformed
        // TODO add your handling code here:
        Automatas a = new Automatas();
        a.setVisible(true);
    }//GEN-LAST:event_menuAutomatasActionPerformed

    private void mit_ayudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mit_ayudaActionPerformed
       abrirManualUsuario();
    }//GEN-LAST:event_mit_ayudaActionPerformed

    private void abrirManualUsuario() {
        try {

           File path = new File ("src/manuales/Manual-usuario.pdf");
            Desktop.getDesktop().open(path);

     }catch (IOException ex) {

            System.out.println(ex);
    }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //generarLexer();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    public static void generarLexer() throws IOException, Exception{
        File file= new File("src/analisislexico/lexer.flex");
        //jflex.Main.generate(file);
        //ajava_cup.Main.main(new String[]{"C:/Proyectos/AnalisisLexico/src/sintactico.cup"});
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnAbrir;
    private javax.swing.JMenuItem btnGuardar;
    private javax.swing.JButton btnLoadArduino;
    private javax.swing.JMenuItem btnNuevo;
    private javax.swing.JButton btnOpen;
    private javax.swing.JComboBox<String> cmbPort;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jtxtCode;
    private javax.swing.JTextArea jtxtError;
    private javax.swing.JTextArea jtxtProd;
    private javax.swing.JMenuItem menuAutomatas;
    private javax.swing.JMenuItem mit_ayuda;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables

    private void eval(String cad) {
        
    }
}
